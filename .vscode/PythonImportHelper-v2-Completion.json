[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "gurobipy",
        "description": "gurobipy",
        "isExtraImport": true,
        "detail": "gurobipy",
        "documentation": {}
    },
    {
        "label": "GRB",
        "importPath": "gurobipy",
        "description": "gurobipy",
        "isExtraImport": true,
        "detail": "gurobipy",
        "documentation": {}
    },
    {
        "label": "ler_dados_instancia",
        "kind": 2,
        "importPath": "resolution",
        "description": "resolution",
        "peekOfCode": "def ler_dados_instancia(caminho_arquivo):\n    with open(caminho_arquivo, 'r') as f:\n        linhas = f.readlines()\n    num_cidades = int(linhas[0].strip())\n    num_centros = int(linhas[1].strip())\n    print(num_cidades, num_centros)\n    # Armazenar coordenadas, número de entregas e elegibilidade como centro de distribuição\n    coordenadas = []\n    entregas = []\n    elegivel_centro = []",
        "detail": "resolution",
        "documentation": {}
    },
    {
        "label": "calcular_distancias",
        "kind": 2,
        "importPath": "resolution",
        "description": "resolution",
        "peekOfCode": "def calcular_distancias(coordenadas):\n    num_cidades = len(coordenadas)\n    distancias = np.zeros((num_cidades, num_cidades))\n    for i in range(num_cidades):\n        for j in range(num_cidades):\n            distancias[i, j] = np.sqrt((coordenadas[i][0] - coordenadas[j][0])**2 + (coordenadas[i][1] - coordenadas[j][1])**2)\n    return distancias\n# Carrega os dados\ncaminho_arquivo = 'Dados/inst_20_3.txt'  # substitua pelo caminho do arquivo\nnum_cidades, num_centros, coordenadas, entregas, elegivel_centro = ler_dados_instancia(caminho_arquivo)",
        "detail": "resolution",
        "documentation": {}
    },
    {
        "label": "caminho_arquivo",
        "kind": 5,
        "importPath": "resolution",
        "description": "resolution",
        "peekOfCode": "caminho_arquivo = 'Dados/inst_20_3.txt'  # substitua pelo caminho do arquivo\nnum_cidades, num_centros, coordenadas, entregas, elegivel_centro = ler_dados_instancia(caminho_arquivo)\ndistancias = calcular_distancias(coordenadas)",
        "detail": "resolution",
        "documentation": {}
    },
    {
        "label": "distancias",
        "kind": 5,
        "importPath": "resolution",
        "description": "resolution",
        "peekOfCode": "distancias = calcular_distancias(coordenadas)",
        "detail": "resolution",
        "documentation": {}
    }
]